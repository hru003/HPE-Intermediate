# -*- coding: utf-8 -*-
"""cifar-10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yreIsx_WbMuwSFTScQfeKlw1q9CkJSHO

### **Name: Satyam Singh**

### ***Description***

---



The dataset is similar to MNIST but includes images of certain
clothing and accessory. The objective is to classify images into
specific classes using CNN.
"""

# Commented out IPython magic to ensure Python compatibility.
import os
import tensorflow as tf 
from tensorflow.keras.datasets import  fashion_mnist 

from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import Conv2D, MaxPool2D, Flatten, Dense 

from tensorflow.keras.models import load_model 
from sklearn.metrics import accuracy_score 
from sklearn.metrics import confusion_matrix 
import numpy as np 

import matplotlib.pyplot as plt 
import seaborn as sns 

# from six.moves import cPickle 
# from swarm import SwarmCallback 
sns.set() 
# %matplotlib inline

"""### ***Dataset:***

---


    
    Total Images: - 70,000
    Train Images: - 60,000
    Test Images:- 10,000
    Image Size:- 28 X 28

Different Classes:
 
    Classes: 'T-shirt/top', 'Trouser',  'Pullover', 'Dress', 'Coat',
    
    'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle Boot'

### ***Creating Dictionaryof Classes***
"""

cloth_dict = {0:'T-shirt/top', 1:'Trouser', 2:'Pullover', 3:'Dress', 4:'Coat',
 
5:'Sandal', 6:'Shirt', 7:'Sneaker', 8:'Bag', 9:'Ankle Boot'}

"""


A. 

Load Fashion data from Keras Library and Split the same into
Train and Test"""

(x_train, y_train), (x_test, y_test)=fashion_mnist.load_data()

"""B. 

Scale the values of train and test between 0 & 1 by dividing
train & test by 255
"""

x_train=x_train/255.0 
x_test=x_test/255.0

"""
Load the data (again, important)

1. 

Reshape the data to (28,28,1). The actual data is in (28,28)
format and we need to add a single channel, 1 to it. Do the
reshape for both train and test."""

# print('Train image before reshaping:', x_train.shape) 
x_train = x_train.reshape(-1, 28,28,1) 
x_test = x_test.reshape(-1, 28,28,1) 
# print('Train image after reshaping:', x_train.shape)

"""

A. 

Build basic CNN on the fashion Data.
"""

model = Sequential() 
model.add(Conv2D(32,(3,3),(1,1), input_shape=(28,28,1))) 
model.add(MaxPool2D((2,2))) 
model.add(Flatten()) 
model.add(Dense(128)) 
model.add(Dense(10, activation= 'softmax')) 
# model.summary()

t_len= int(len(x_train)*(0.90))
t_len

x= x_train[:t_len];y= y_train[:t_len] 
val_x= x_train[t_len:] 
val_y= y_train[t_len:]

"""B. 

Compile the model with either ADAM or GradientDescent
with Loss as sparse_categorical_crossentropy and metrics
'accuracy'.

C. 

Fit a model with 30 Epochs and 1000 Batch Size

"""

model.compile('adam', 'sparse_categorical_crossentropy', 'accuracy') 
swarm_callback = SwarmCallback(sync_interval = 10,
                                min_peers = 4,
                                val_data = (val_x, val_y),
                                val_batch_size = 30) 

model.fit(x,y, epochs= 30, batch_size= 30, validation_data=(val_x, val_y), shuffle = True, callbacks = [swarm_callback])
print("Trained")

"""

A. 

Save the model as .H5 file, as “my_model”.h5."""

model_dir = os.getcwd()
save_dir = os.path.join(model_dir, 'saved_models')
model_name = 'keras_cifar10_trained_model.h5'
model.save(model_name) 
print('model_saved')